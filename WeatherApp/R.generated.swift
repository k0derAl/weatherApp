//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import SwipeCellKit
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `CityCell`.
    static let cityCell: Rswift.ReuseIdentifier<SwipeCellKit.SwipeTableViewCell> = Rswift.ReuseIdentifier(identifier: "CityCell")
    /// Reuse identifier `DetailWeatherCell`.
    static let detailWeatherCell: Rswift.ReuseIdentifier<DetailWeatherViewCell> = Rswift.ReuseIdentifier(identifier: "DetailWeatherCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `ListCities`.
    static let listCities = _R.storyboard.listCities()
    /// Storyboard `WeatherOfCity`.
    static let weatherOfCity = _R.storyboard.weatherOfCity()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "ListCities", bundle: ...)`
    static func listCities(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.listCities)
    }
    
    /// `UIStoryboard(name: "WeatherOfCity", bundle: ...)`
    static func weatherOfCity(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.weatherOfCity)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }
    
    /// This `R.string.locale` struct is generated, and contains static references to 4 localization keys.
    struct locale {
      /// en translation: add city
      /// 
      /// Locales: en, ru
      static let addCity = Rswift.StringResource(key: "add city", tableName: "locale", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: add new city
      /// 
      /// Locales: en, ru
      static let addNewCity = Rswift.StringResource(key: "add new city", tableName: "locale", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: cancel
      /// 
      /// Locales: en, ru
      static let cancel = Rswift.StringResource(key: "cancel", tableName: "locale", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: cities
      /// 
      /// Locales: en, ru
      static let cities = Rswift.StringResource(key: "cities", tableName: "locale", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      
      /// en translation: add city
      /// 
      /// Locales: en, ru
      static func addCity(_: Void = ()) -> String {
        return NSLocalizedString("add city", tableName: "locale", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: add new city
      /// 
      /// Locales: en, ru
      static func addNewCity(_: Void = ()) -> String {
        return NSLocalizedString("add new city", tableName: "locale", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: cancel
      /// 
      /// Locales: en, ru
      static func cancel(_: Void = ()) -> String {
        return NSLocalizedString("cancel", tableName: "locale", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: cities
      /// 
      /// Locales: en, ru
      static func cities(_: Void = ()) -> String {
        return NSLocalizedString("cities", tableName: "locale", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try listCities.validate()
      try weatherOfCity.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct listCities: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let listCities = StoryboardViewControllerResource<ListCitiesVC>(identifier: "listCities")
      let name = "ListCities"
      
      func listCities(_: Void = ()) -> ListCitiesVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: listCities)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.listCities().listCities() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'listCities' could not be loaded from storyboard 'ListCities' as 'ListCitiesVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct weatherOfCity: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WeatherOfCity"
      let weatherOfCityVC = StoryboardViewControllerResource<WeatherOfCityVC>(identifier: "weatherOfCityVC")
      
      func weatherOfCityVC(_: Void = ()) -> WeatherOfCityVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: weatherOfCityVC)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.weatherOfCity().weatherOfCityVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'weatherOfCityVC' could not be loaded from storyboard 'WeatherOfCity' as 'WeatherOfCityVC'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
